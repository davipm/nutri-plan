generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean   @default(false)
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now()) @updatedAt
  role          String?
  banned        Boolean?  @default(false)
  banReason     String?
  banExpires    DateTime?
  sessions      Session[]
  accounts      Account[]
  Meal          Meal[]

  @@unique([email])
  @@map("user")
}

model Session {
  id             String   @id
  expiresAt      DateTime
  token          String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  ipAddress      String?
  userAgent      String?
  userId         String
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  impersonatedBy String?

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@map("account")
}

model Verification {
  id         String   @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  @@map("verification")
}

model Category {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  createAt  DateTime @default(now())
  updatedAt DateTime @updatedAt
  foods     Food[]
}

model Food {
  id               Int               @id @default(autoincrement())
  name             String            @unique
  calories         Float?
  protein          Float?
  fat              Float?
  carbohydrates    Float?
  fiber            Float?
  sugar            Float?
  categoryId       Int?
  createdAt        DateTime          @default(now())
  updateAt         DateTime          @updatedAt
  mealId           Int?
  category         Category?         @relation(fields: [categoryId], references: [id])
  meal             Meal?             @relation(fields: [mealId], references: [id])
  foodServingUnits FoodServingUnit[]
  mealFood         MealFood[]
  servingUnit      ServingUnit[]
}

model ServingUnit {
  id              Int               @id @default(autoincrement())
  name            String            @unique
  foodId          Int?
  createdAt       DateTime          @default(now())
  updateAt        DateTime          @updatedAt
  FoodServingUnit FoodServingUnit[]
  mealFood        MealFood[]
  food            Food?             @relation(fields: [foodId], references: [id])
}

model FoodServingUnit {
  id            Int         @id @default(autoincrement())
  foodId        Int
  servingUnitId Int
  createdAt     DateTime    @default(now())
  updateAt      DateTime    @updatedAt
  grams         Float?
  food          Food        @relation(fields: [foodId], references: [id])
  servingUnit   ServingUnit @relation(fields: [servingUnitId], references: [id])
}

model Meal {
  id        Int        @id @default(autoincrement())
  dateTime  DateTime
  userId    String?
  createdAt DateTime   @default(now())
  updateAt  DateTime   @updatedAt
  Food      Food[]
  user      User?      @relation(fields: [userId], references: [id])
  mealFoods MealFood[]
}

model MealFood {
  id            Int         @id @default(autoincrement())
  foodId        Int
  mealId        Int
  amount        Float
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  servingUnitId Int
  food          Food        @relation(fields: [foodId], references: [id])
  meal          Meal        @relation(fields: [mealId], references: [id])
  servingUnit   ServingUnit @relation(fields: [servingUnitId], references: [id])
}

enum Role {
  USER
  ADMIN
}
